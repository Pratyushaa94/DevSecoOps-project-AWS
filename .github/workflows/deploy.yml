name: CI/CD Pipeline - AWS DevSecOps

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SCANNER_HOME: /opt/sonar-scanner
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Check Frontend JS files
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Check Backend JS files
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

      - name: Run Gitleaks Scan (Client + API)
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks detect --source ./api --exit-code 1 --report-path gitleaks-api-report.json
          gitleaks detect --source ./client --exit-code 1 --report-path gitleaks-client-report.json

      - name: Install SonarScanner
        run: |
          curl -sSL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-*/ /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run Sonar Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=NodeJS-Project \
            -Dsonar.projectName=NodeJS-Project \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'fs-report.html'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend Image
        run: |
          cd api
          docker build -t ${{ secrets.DOCKER_USER }}/backend:latest .
          trivy image --format table -o backend-image-report.html ${{ secrets.DOCKER_USER }}/backend:latest
          docker push ${{ secrets.DOCKER_USER }}/backend:latest

      - name: Build & Push Frontend Image
        run: |
          cd client
          docker build -t ${{ secrets.DOCKER_USER }}/frontend:latest .
          trivy image --format table -o frontend-image-report.html ${{ secrets.DOCKER_USER }}/frontend:latest
          docker push ${{ secrets.DOCKER_USER }}/frontend:latest

  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: build
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # üîê Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ‚öôÔ∏è Update kubeconfig to connect to EKS
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          kubectl get nodes

      # üß± Create namespace if not exists
      - name: Create namespace if not exists
        run: |
          kubectl get namespace prod || kubectl create namespace prod

      # üöÄ Deploy manifests to EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s-prod/sc.yaml   
          kubectl apply -f k8s-prod/mysql.yaml 
          kubectl apply -f k8s-prod/backend.yaml 
          kubectl apply -f k8s-prod/frontend.yaml 
          kubectl apply -f k8s-prod/ci.yaml 
          kubectl apply -f k8s-prod/ingress.yaml

      # üåê Show application external IP
      - name: Show application external IP
        run: |
          echo "Fetching external IP of frontend service..."
          kubectl get svc frontend-svc -n prod
          echo "Fetching ingress info..."
          kubectl get ingress -n prod

      # ü™∂ Set up Helm
      - name: Set up Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # üìä Add Prometheus Helm Repo
      - name: Add Prometheus Helm Repo
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      # üìà Deploy Prometheus Stack with Helm
      - name: Deploy Prometheus Stack with Helm
        run: |
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            -f monitoring/values.yaml \
            -n monitoring --create-namespace
